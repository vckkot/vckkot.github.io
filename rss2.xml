<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SkyL的博客</title>
    <link>https://vckkot.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>人静而后安，安而能后定，定而能后慧，慧而能后悟，悟而能后得。</description>
    <pubDate>Wed, 24 Oct 2018 06:25:54 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>版权测试</title>
      <link>https://vckkot.github.io/%E7%89%88%E6%9D%83%E6%B5%8B%E8%AF%95/</link>
      <guid>https://vckkot.github.io/%E7%89%88%E6%9D%83%E6%B5%8B%E8%AF%95/</guid>
      <pubDate>Wed, 24 Oct 2018 06:25:54 GMT</pubDate>
      <description>
      
      </description>
      
      <comments>https://vckkot.github.io/%E7%89%88%E6%9D%83%E6%B5%8B%E8%AF%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>评论测试</title>
      <link>https://vckkot.github.io/%E8%AF%84%E8%AE%BA%E6%B5%8B%E8%AF%95/</link>
      <guid>https://vckkot.github.io/%E8%AF%84%E8%AE%BA%E6%B5%8B%E8%AF%95/</guid>
      <pubDate>Thu, 18 Oct 2018 09:23:24 GMT</pubDate>
      <description>
      
      </description>
      
      <comments>https://vckkot.github.io/%E8%AF%84%E8%AE%BA%E6%B5%8B%E8%AF%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JDBC</title>
      <link>https://vckkot.github.io/JDBC/</link>
      <guid>https://vckkot.github.io/JDBC/</guid>
      <pubDate>Wed, 17 Oct 2018 09:29:06 GMT</pubDate>
      <description>
      
        &lt;p&gt;#JDBC&lt;/p&gt;
&lt;p&gt;@(Java)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;##ResultSetMetaData&lt;br&gt;[toc]&lt;/p&gt;
&lt;p&gt;###1. MetaData–元数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是指结果集对象的相关其他数据,比如说总列数,每一列的名称,每一列的sql数据类型,每一列的java数据类型等&lt;blockquote&gt;
&lt;p&gt;案例演示&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Connection conn=null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String sql=&amp;quot;select id,name,password  from dept where id&amp;lt;?&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            conn=DBUtiles.getConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            PreparedStatement ps=conn.prepareStatement(sql);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ps.setInt(1, 100);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ResultSet rs=ps.executeQuery();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //获取结果集的元数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ResultSetMetaData meta=rs.getMetaData();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //遍历并显示结果集中所有列的名称       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for (int i = 1; i &amp;lt;= meta.getColumnCount(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.println(meta.getColumnName(i));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //获得结果集的所有列数量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//          int n=meta.getColumnCount();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//          System.out.println(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //通过下标获得结果集的某一列的列名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//          String name1=meta.getColumnName(1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//          String name2=meta.getColumnName(2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//          System.out.println(name1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//          System.out.println(name2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//          while (rs.next()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//              System.out.println(rs.getString(&amp;quot;name&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //关闭结果集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rs.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //关闭PS对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ps.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (SQLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // TODO Auto-generated catch block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            DBUtiles.closeConnection(conn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>#JDBC</p><p>@(Java)</p><hr><p>##ResultSetMetaData<br>[toc]</p><p>###1. MetaData–元数据</p><ul><li>是指结果集对象的相关其他数据,比如说总列数,每一列的名称,每一列的sql数据类型,每一列的java数据类型等<blockquote><p>案例演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">        Connection conn=null;</span><br><span class="line">        String sql=&quot;select id,name,password  from dept where id&lt;?&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            conn=DBUtiles.getConnection();</span><br><span class="line">            PreparedStatement ps=conn.prepareStatement(sql);</span><br><span class="line">            ps.setInt(1, 100);</span><br><span class="line">            ResultSet rs=ps.executeQuery();</span><br><span class="line">            //获取结果集的元数据</span><br><span class="line">            ResultSetMetaData meta=rs.getMetaData();</span><br><span class="line">            //遍历并显示结果集中所有列的名称       </span><br><span class="line">            for (int i = 1; i &lt;= meta.getColumnCount(); i++) &#123;</span><br><span class="line">                System.out.println(meta.getColumnName(i));</span><br><span class="line">            &#125;</span><br><span class="line">            //获得结果集的所有列数量</span><br><span class="line">//          int n=meta.getColumnCount();</span><br><span class="line">//          System.out.println(n);</span><br><span class="line">            //通过下标获得结果集的某一列的列名</span><br><span class="line">//          String name1=meta.getColumnName(1);</span><br><span class="line">//          String name2=meta.getColumnName(2);</span><br><span class="line">//          System.out.println(name1);</span><br><span class="line">//          System.out.println(name2);</span><br><span class="line">//          while (rs.next()) &#123;</span><br><span class="line">//              System.out.println(rs.getString(&quot;name&quot;));</span><br><span class="line">//          &#125;</span><br><span class="line">            //关闭结果集</span><br><span class="line">            rs.close();</span><br><span class="line">            //关闭PS对象</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            // TODO Auto-generated catch block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            DBUtiles.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><a id="more"></a><hr><p>###2.由于jdbc自动提交事务,所以需要手动关闭</p><blockquote><p>案例演示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">public class Demo2 &#123;</span><br><span class="line">/**</span><br><span class="line"> * 由于JDBC自动事务提交</span><br><span class="line"> * 1.关闭自动提交conn.setAutoCommit(false);</span><br><span class="line"> * 2.try的最后部分手动提交conn.commit();</span><br><span class="line"> * 3.由于一出现错误,就会运行catch块</span><br><span class="line"> *   在catch中conn.rollback();</span><br><span class="line"> * 4.封装回滚方法</span><br><span class="line"> * @param args</span><br><span class="line"> */</span><br><span class="line">    static String sql1=&quot;update bal set&quot;</span><br><span class="line">            + &quot; money=money+? where id=?&quot;;</span><br><span class="line">    static String sql2=&quot;select money from bal where id=?&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        pay(2, 4, 1000);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void pay(int from,int to,double money)&#123;</span><br><span class="line">        Connection conn=null;</span><br><span class="line">        try &#123;</span><br><span class="line">            conn=DBUtiles.getConnection();</span><br><span class="line">            //关闭自动commit</span><br><span class="line">            conn.setAutoCommit(false);</span><br><span class="line">            PreparedStatement ps=conn.prepareStatement(sql1);</span><br><span class="line">            /**</span><br><span class="line">             * 业务模块---a--&gt;b 打1000</span><br><span class="line">             * create table bal(</span><br><span class="line">             * id int,</span><br><span class="line">             * name varchar(20),</span><br><span class="line">             * money double(8,2)</span><br><span class="line">             * )</span><br><span class="line">             */</span><br><span class="line">            //a-1000</span><br><span class="line">            ps.setDouble(1, -money);</span><br><span class="line">            ps.setInt(2, from);</span><br><span class="line">            int n=ps.executeUpdate();</span><br><span class="line">            //更新失败</span><br><span class="line">            if (n!=1) &#123;</span><br><span class="line">                throw new Exception(&quot;减钱失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            //b+1000</span><br><span class="line">            ps.setDouble(1, money);</span><br><span class="line">            ps.setInt(2, to);</span><br><span class="line">            n=ps.executeUpdate();</span><br><span class="line">            if (n!=1) &#123;</span><br><span class="line">                throw new Exception(&quot;加钱失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            ps.close();</span><br><span class="line">            //检查a有没有1000</span><br><span class="line">            ps=conn.prepareStatement(sql2);</span><br><span class="line">            ps.setInt(1, from);</span><br><span class="line">            ResultSet rs=ps.executeQuery();</span><br><span class="line">            while (rs.next()) &#123;</span><br><span class="line">                double bal=rs.getDouble(1);</span><br><span class="line">                if (bal&lt;0) &#123;</span><br><span class="line">                    throw new Exception(&quot;余额不足&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //手动提交</span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            DBUtiles.rollback(conn);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            DBUtiles.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><p>###批量更新</p><ul><li><p>把多条sql存入<code>Statement</code>对象的缓存,一次性发送给DB执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Statement sta=conn.createStatement();</span><br><span class="line">//          sta.addBatch(sql1);</span><br><span class="line">//          sta.addBatch(sql2);         </span><br><span class="line">//          int[] arr=sta.executeBatch();</span><br></pre></td></tr></table></figure></li><li><p>创建一个执行计划,把多条参数存入<code>PreParedStatement</code>对象缓存中,一次性发送给DB执行</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement ps=conn.prepareStatement(sql6);           </span><br><span class="line">ps.setInt(1, 1);</span><br><span class="line">ps.setString(2, &quot;lili&quot;);</span><br><span class="line">ps.addBatch();          </span><br><span class="line">int[] arr=ps.executeBatch();</span><br></pre></td></tr></table></figure><blockquote><p>内存溢出OutOfMemory</p></blockquote><p>###获取自动生成的主键</p><ul><li><p><code>String[] colNames={&quot;id&quot;};</code> 自动生成值的列的列名</p></li><li><p><code>PreparedStatement ps =conn.prepareStatement(sql1, colNames);</code>必须与上面的命令一起使用 <code>ps.getGeneratedKeys()</code></p></li></ul><blockquote><p>案例演示</p></blockquote><pre><code>    public static void main(String[] args) {        String sql1=&quot;create table &quot;                + &quot;log1 (id int ,msg varchar(20))&quot;;        String sql2=&quot;create table &quot;                + &quot;log2 (id int ,msg varchar(20))&quot;;        String sql3=&quot;create table &quot;                + &quot;log3 (id int ,msg varchar(20))&quot;;        String sql4=&quot;create table &quot;                + &quot;log4 (id int ,msg varchar(20))&quot;;        String sql5=&quot;create table &quot;                + &quot;log5 (id int ,msg varchar(20))&quot;;        String sql6=&quot;insert into log1 values &quot;                + &quot;(?,?)&quot;;        String sql7=&quot;insert into log2 values &quot;                + &quot;(?,?)&quot;;        //获得连接对象        Connection conn=null;        try {            conn=DBUtiles.getConnection();            //批量更新的第一种方法            //把多个sql语句存入sta对象的缓存中//          Statement sta=conn.createStatement();//          sta.addBatch(sql1);//          sta.addBatch(sql2);//          sta.addBatch(sql3);//          sta.addBatch(sql4);//          sta.addBatch(sql5);            //一次性发送给数据库执行            //返回值 &gt;=0---成功,有结果            //返回值-2----成功,没有结果            //返回值-3----不成功//          int[] arr=sta.executeBatch();//          System.out.println(Arrays.toString(arr));            //第二中批量更新的方式            //使用ps固定一个执行计划            //把一堆参数存入ps的缓存            //一次性发送给DB,进行处理//          PreparedStatement ps=conn.prepareStatement(sql6);//          //          ps.setInt(1, 1);//          ps.setString(2, &quot;lili&quot;);//          ps.addBatch();//          //          ps.setInt(1, 2);//          ps.setString(2, &quot;lucy&quot;);//          ps.addBatch();//          //          int[] arr=ps.executeBatch();//          System.out.println(Arrays.toString(arr));        PreparedStatement ps =conn.prepareStatement(sql7);        for (int i = 1; i &lt; 100; i++) {            ps.setInt(1, i);            ps.setString(2, &quot;test&quot;+i);            ps.addBatch();            if (i%8==0) {//97.98.99                ps.executeBatch();            }        }            ps.executeBatch();        } catch (Exception e) {            e.printStackTrace();        }finally {            DBUtiles.closeConnection(conn);        }    }</code></pre><p>##DAO</p><ul><li><p>DAO作为数据访问层,把业务逻辑层和数据库分割开来</p></li><li><p>业务逻辑层需要数据,就跟DAO要</p></li><li><p>业务逻辑层要保存数据,就交给DAO,让DAO去保存</p></li><li><p>业务逻辑层不关系数据如何获取,如何保存,全部都由DAO负责</p><blockquote><p>案例演示</p></blockquote><pre><code>  public class UserDAO1 implements UserDAO{    private static final String search_by_id        =&quot;select * from user_1 where id=?&quot;;    private static final String search_all        =&quot;select * from user_1&quot;;    private static final String update_user_password    =&quot;update user_1 set name=?,password=? where id=?&quot;;    private static final String insert_user    =&quot;insert into user_1 values(null,?,?,?)&quot;;    public User findUserById(int id) {        Connection conn=null;        try {            conn=DBUtiles.getConnection();            PreparedStatement ps=conn.prepareStatement(search_by_id);            ps.setInt(1, id);            ResultSet rs=ps.executeQuery();            int i=0;            String name=null;            String pwd=null;            int age=0;            while(rs.next()){                i=rs.getInt(1);                name=rs.getString(2);                pwd=rs.getString(3);                age=rs.getInt(4);            }            return new User(i, name, pwd, age);        } catch (Exception e) {            e.printStackTrace();            DBUtiles.rollback(conn);        }finally{            DBUtiles.closeConnection(conn);        }        return null;    }    public List&lt;User&gt; findAllUser() {        Connection conn=null;        try {            conn=DBUtiles.getConnection();            conn.setAutoCommit(false);            Statement sta=conn.createStatement();            ResultSet rs=sta.executeQuery(search_all);            List&lt;User&gt; list=new ArrayList&lt;User&gt;();            while (rs.next()) {                int i=rs.getInt(1);                String name=rs.getString(2);                String pwd=rs.getString(3);                int age=rs.getInt(4);                User user=new User(i, name, pwd, age);                list.add(user);            }            conn.commit();            return list;        } catch (Exception e) {            e.printStackTrace();            DBUtiles.rollback(conn);        }finally {            DBUtiles.closeConnection(conn);        }        return null;    }    public int updateUser(User user) {        Connection conn=null;        try {            conn=DBUtiles.getConnection();            PreparedStatement ps=conn.prepareStatement(update_user_password);            ps.setString(1, user.getName());            ps.setString(2, user.getPwd());            ps.setInt(3, user.getId());            int n=ps.executeUpdate();            if (n!=1) {                throw new Exception(&quot;修改失败&quot;);            }            ps.close();        } catch (Exception e) {            e.printStackTrace();            DBUtiles.rollback(conn);        }finally {            DBUtiles.closeConnection(conn);        }        return 0;    }    public int saveUser(User user) {        Connection conn=null;        try {            conn=DBUtiles.getConnection();            PreparedStatement ps=conn.prepareStatement(insert_user);            ps.setString(1, user.getName());            ps.setString(2, user.getPwd());            ps.setInt(3, user.getAge());            int n=ps.executeUpdate();            if (n!=1) {                throw new Exception(&quot;插入失败&quot;);            }            ps.close();        } catch (Exception e) {            e.printStackTrace();            DBUtiles.rollback(conn);        }finally {            DBUtiles.closeConnection(conn);        }        return 0;    }}</code></pre></li></ul><hr><blockquote><p>测试类</p></blockquote><pre><code>    public static void main(String[] args) {        //数据---&gt;数据库读取出来的        //验证dao的findUserById方法        UserDAO dao=new UserDAO1();        //验证dao的findall        //List&lt;User&gt; list=dao.findAllUser();        //for (int i = 0; i &lt; list.size(); i++) {        //System.out.println(list.get(i).getId());        //}        //验证dao的修改方法        //User user=new User(2, &quot;xiongda&quot;, &quot;321&quot;, 18);        //dao.updateUser(user);        //验证dao的插入方法        User user=new User(1232, &quot;xiongda&quot;, &quot;321&quot;, 18);        dao.saveUser(user);}</code></pre><hr>]]></content:encoded>
      
      <comments>https://vckkot.github.io/JDBC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://vckkot.github.io/hello-world/</link>
      <guid>https://vckkot.github.io/hello-world/</guid>
      <pubDate>Wed, 17 Oct 2018 07:42:23 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>https://vckkot.github.io/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
